Index: src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.algorithm_jfx;\r\n\r\nimport javafx.animation.*;\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Random;\r\n\r\n\r\n\r\npublic class StudentGradeTrackerProject extends Application {\r\n\r\n    public static final int StdNum = 3;\r\n    ArrayList<studentTracker> students;\r\n    HBox[] hBoxes;\r\n    ObservableList<String> sortingName;\r\n    ComboBox<String> sortingAlgorithmComboBox;\r\n\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        sortingName = FXCollections.observableArrayList(\"selection\", \"bubble\");\r\n        students = new ArrayList<>();\r\n\r\n        // Create grid for student data\r\n        GridPane gridPane = new GridPane();\r\n        gridPane.setPadding(new Insets(10));\r\n        gridPane.setHgap(20);\r\n        gridPane.setVgap(10);\r\n\r\n        Label nameLabel = new Label(\"Student Name\");\r\n        Label gradeLabel = new Label(\"Grade\");\r\n        HBox h1=new HBox();\r\n        h1.getChildren().addAll(nameLabel,gradeLabel);\r\n        nameLabel.setStyle(\"-fx-font-weight: bold;\");\r\n        gradeLabel.setStyle(\"-fx-font-weight: bold;\");\r\n        h1.setSpacing(50);\r\n        gridPane.getChildren().addAll(h1);\r\n        hBoxes=new HBox[StdNum];\r\n        Random random = new Random();\r\n        for (int i = 0; i < StdNum; i++) {\r\n            students.add(new studentTracker(\"Student\" + i, random.nextInt(100)));\r\n            Label studentNameLabel = new Label(students.get(i).getName());\r\n            Label gradeLabelValue = new Label(Integer.toString(students.get(i).getGrade()));\r\n            HBox hBox= new HBox();\r\n            hBox.getChildren().addAll(studentNameLabel, gradeLabelValue);\r\n            hBox.setSpacing(85);\r\n            hBoxes[i]=hBox;\r\n            gridPane.add(hBox, 0, i+1);\r\n            if (i % 2 == 0) {\r\n                hBox.setBackground(new Background(new BackgroundFill(Color.LIGHTGRAY, null, null)));\r\n            } else {\r\n                hBox.setBackground(new Background(new BackgroundFill(Color.WHITE, null, null)));\r\n            }\r\n        }\r\n\r\n        Collections.shuffle(students);\r\n\r\n        // Create buttons and combo box\r\n        Button sortButton = new Button(\"Sort\");\r\n        Button shuffleButton = new Button(\"Shuffle\");\r\n        sortingAlgorithmComboBox = new ComboBox<>(sortingName);\r\n        sortingAlgorithmComboBox.setPromptText(\"Select sorting algorithm\");\r\n\r\n        sortButton.setOnAction(event -> {\r\n            String selectedItem = sortingAlgorithmComboBox.getValue();\r\n            if (selectedItem != null) {\r\n                if (selectedItem.equals(\"selection\")) {\r\n                    animateSelectionSort(students,gridPane);\r\n                } else if (selectedItem.equals(\"bubble\")) {\r\n                    animateBubbleSort(students);\r\n                }\r\n            } else {\r\n                System.out.println(\"No sorting algorithm selected.\");\r\n            }\r\n        });\r\n\r\n        shuffleButton.setOnAction(event -> {\r\n\r\n            Collections.shuffle(students);\r\n            //updateGridView(gridPane);\r\n        });\r\n\r\n        // Layout configuration for buttons and combo box\r\n        HBox controlButtons = new HBox(sortingAlgorithmComboBox, sortButton, shuffleButton);\r\n        controlButtons.setAlignment(Pos.CENTER);\r\n        controlButtons.setSpacing(20);\r\n\r\n        // Create bottom layout for buttons\r\n        BorderPane bottomLayout = new BorderPane();\r\n        bottomLayout.setCenter(controlButtons);\r\n        bottomLayout.setPadding(new Insets(10));\r\n\r\n        // Create main BorderPane to hold grid and buttons\r\n        BorderPane root = new BorderPane();\r\n        root.setCenter(gridPane);\r\n        root.setBottom(bottomLayout);\r\n\r\n        Scene scene = new Scene(root, 500, 400);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    private void animateBubbleSort(ArrayList<studentTracker> students) {\r\n        Timeline timeline = new Timeline();\r\n        boolean swapped;\r\n        do {\r\n            swapped = false;\r\n            for (int i = 0; i < students.size() - 1; i++) {\r\n                if (students.get(i).getGrade() > students.get(i + 1).getGrade()) {\r\n                    Collections.swap(students, i, i + 1);\r\n\r\n                    swapped = true;\r\n                }\r\n            }\r\n        } while (swapped);\r\n        timeline.play();\r\n    }\r\n\r\n\r\n\r\n\r\n    private void animateSelectionSort(ArrayList<studentTracker> students, GridPane gridPane) {\r\n        Timeline timeline = new Timeline();\r\n        timeline.setCycleCount(students.size());\r\n        for (int i = 0; i < students.size() - 1; i++) {\r\n            final int minIndex = i;\r\n            timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(i), event -> {\r\n                int minGrade = students.get(minIndex).getGrade();\r\n                int swapIndex = minIndex;\r\n                for (int j = minIndex + 1; j < students.size(); j++) {\r\n                    if (students.get(j).getGrade() < minGrade) {\r\n                        System.out.println(\"area 1\");\r\n                        minGrade = students.get(j).getGrade();\r\n                        swapIndex = j;\r\n                    }\r\n                }\r\n                if (swapIndex != minIndex) {\r\n                    // Swap students\r\n                    System.out.println(\"area 2\");\r\n                    Collections.swap(students, minIndex, swapIndex);\r\n                    // Animate hBoxes\r\n                    TranslateTransition tt1 = new TranslateTransition(Duration.seconds(1), hBoxes[minIndex]);\r\n                    TranslateTransition tt2 = new TranslateTransition(Duration.seconds(1), hBoxes[swapIndex]);\r\n\r\n                    tt1.setToY((swapIndex - minIndex) * hBoxes[minIndex].getHeight());\r\n                    tt2.setToY((minIndex - swapIndex) * hBoxes[swapIndex].getHeight());\r\n                    tt1.play();\r\n                    tt2.play();\r\n\r\n                    int finalSwapIndex = swapIndex;\r\n                  tt1.setOnFinished(e -> {\r\n                        hBoxes[minIndex].setTranslateY(0);\r\n                        gridPane.getChildren().remove(hBoxes[minIndex]);\r\n                        gridPane.add(hBoxes[minIndex], 0, finalSwapIndex + 1);\r\n                    });\r\n                    tt2.setOnFinished(e -> {\r\n                        hBoxes[finalSwapIndex].setTranslateY(0);\r\n                        gridPane.getChildren().remove(hBoxes[finalSwapIndex]);\r\n                        gridPane.add(hBoxes[finalSwapIndex], 0, minIndex + 1);\r\n                    });\r\n                    // Swap hBoxes\r\n                    HBox temp = hBoxes[minIndex];\r\n                    hBoxes[minIndex] = hBoxes[swapIndex];\r\n                    hBoxes[swapIndex] = temp;\r\n                }\r\n            }));\r\n        }\r\n        timeline.play();\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java b/src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java
--- a/src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java	(revision 3d5f8f3333322d57d5f1f3f9d7ef3c63cadde826)
+++ b/src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java	(date 1713974866593)
@@ -24,7 +24,7 @@
 
 public class StudentGradeTrackerProject extends Application {
 
-    public static final int StdNum = 3;
+    public static final int StdNum = 10;
     ArrayList<studentTracker> students;
     HBox[] hBoxes;
     ObservableList<String> sortingName;
@@ -39,38 +39,8 @@
     public void start(Stage primaryStage) {
         sortingName = FXCollections.observableArrayList("selection", "bubble");
         students = new ArrayList<>();
+     GridPane gridPane=DrawGridPane(new GridPane());
 
-        // Create grid for student data
-        GridPane gridPane = new GridPane();
-        gridPane.setPadding(new Insets(10));
-        gridPane.setHgap(20);
-        gridPane.setVgap(10);
-
-        Label nameLabel = new Label("Student Name");
-        Label gradeLabel = new Label("Grade");
-        HBox h1=new HBox();
-        h1.getChildren().addAll(nameLabel,gradeLabel);
-        nameLabel.setStyle("-fx-font-weight: bold;");
-        gradeLabel.setStyle("-fx-font-weight: bold;");
-        h1.setSpacing(50);
-        gridPane.getChildren().addAll(h1);
-        hBoxes=new HBox[StdNum];
-        Random random = new Random();
-        for (int i = 0; i < StdNum; i++) {
-            students.add(new studentTracker("Student" + i, random.nextInt(100)));
-            Label studentNameLabel = new Label(students.get(i).getName());
-            Label gradeLabelValue = new Label(Integer.toString(students.get(i).getGrade()));
-            HBox hBox= new HBox();
-            hBox.getChildren().addAll(studentNameLabel, gradeLabelValue);
-            hBox.setSpacing(85);
-            hBoxes[i]=hBox;
-            gridPane.add(hBox, 0, i+1);
-            if (i % 2 == 0) {
-                hBox.setBackground(new Background(new BackgroundFill(Color.LIGHTGRAY, null, null)));
-            } else {
-                hBox.setBackground(new Background(new BackgroundFill(Color.WHITE, null, null)));
-            }
-        }
 
         Collections.shuffle(students);
 
@@ -84,7 +54,9 @@
             String selectedItem = sortingAlgorithmComboBox.getValue();
             if (selectedItem != null) {
                 if (selectedItem.equals("selection")) {
-                    animateSelectionSort(students,gridPane);
+                    gridPane.getChildren().clear();
+                    animateSelectionSort(students);
+                    DrawGridPane(gridPane);
                 } else if (selectedItem.equals("bubble")) {
                     animateBubbleSort(students);
                 }
@@ -94,9 +66,8 @@
         });
 
         shuffleButton.setOnAction(event -> {
-
             Collections.shuffle(students);
-            //updateGridView(gridPane);
+
         });
 
         // Layout configuration for buttons and combo box
@@ -111,8 +82,8 @@
 
         // Create main BorderPane to hold grid and buttons
         BorderPane root = new BorderPane();
+        root.setBottom(bottomLayout);
         root.setCenter(gridPane);
-        root.setBottom(bottomLayout);
 
         Scene scene = new Scene(root, 500, 400);
         primaryStage.setScene(scene);
@@ -136,56 +107,81 @@
     }
 
 
-
-
-    private void animateSelectionSort(ArrayList<studentTracker> students, GridPane gridPane) {
-        Timeline timeline = new Timeline();
-        timeline.setCycleCount(students.size());
+    private void animateSelectionSort(ArrayList<studentTracker> students) {
         for (int i = 0; i < students.size() - 1; i++) {
-            final int minIndex = i;
-            timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(i), event -> {
-                int minGrade = students.get(minIndex).getGrade();
-                int swapIndex = minIndex;
-                for (int j = minIndex + 1; j < students.size(); j++) {
-                    if (students.get(j).getGrade() < minGrade) {
-                        System.out.println("area 1");
-                        minGrade = students.get(j).getGrade();
-                        swapIndex = j;
-                    }
+            int minIndex = i;
+            int swapIndex=minIndex;
+            for (int j = i + 1; j < students.size(); j++) {
+                if (students.get(j).getGrade() < students.get(minIndex).getGrade()) {
+                    swapIndex = j;
+                } else if (students.get(j).getGrade() > students.get(minIndex).getGrade()) {
+                    continue;
+                }
+                else
+                {
+                    break;
                 }
-                if (swapIndex != minIndex) {
-                    // Swap students
-                    System.out.println("area 2");
-                    Collections.swap(students, minIndex, swapIndex);
-                    // Animate hBoxes
-                    TranslateTransition tt1 = new TranslateTransition(Duration.seconds(1), hBoxes[minIndex]);
-                    TranslateTransition tt2 = new TranslateTransition(Duration.seconds(1), hBoxes[swapIndex]);
+            }
+            if (swapIndex == minIndex){
+                break;
+            }
+            if(minIndex!=swapIndex) {
+              AnimationSelectionGrades(minIndex,swapIndex);
+
+
+            }
+        }
+
 
-                    tt1.setToY((swapIndex - minIndex) * hBoxes[minIndex].getHeight());
-                    tt2.setToY((minIndex - swapIndex) * hBoxes[swapIndex].getHeight());
-                    tt1.play();
-                    tt2.play();
+    }
 
-                    int finalSwapIndex = swapIndex;
-                  tt1.setOnFinished(e -> {
-                        hBoxes[minIndex].setTranslateY(0);
-                        gridPane.getChildren().remove(hBoxes[minIndex]);
-                        gridPane.add(hBoxes[minIndex], 0, finalSwapIndex + 1);
-                    });
-                    tt2.setOnFinished(e -> {
-                        hBoxes[finalSwapIndex].setTranslateY(0);
-                        gridPane.getChildren().remove(hBoxes[finalSwapIndex]);
-                        gridPane.add(hBoxes[finalSwapIndex], 0, minIndex + 1);
-                    });
-                    // Swap hBoxes
-                    HBox temp = hBoxes[minIndex];
-                    hBoxes[minIndex] = hBoxes[swapIndex];
-                    hBoxes[swapIndex] = temp;
-                }
-            }));
-        }
-        timeline.play();
-    }
+
+    public GridPane DrawGridPane (GridPane gridPane){
+
+        gridPane.setPadding(new Insets(10));
+        gridPane.setHgap(20);
+        gridPane.setVgap(10);
+
+        Label nameLabel = new Label("Student Name");
+        Label gradeLabel = new Label("Grade");
+        HBox h1 = new HBox();
+        h1.getChildren().addAll(nameLabel, gradeLabel);
+        nameLabel.setStyle("-fx-font-weight: bold;");
+        gradeLabel.setStyle("-fx-font-weight: bold;");
+        h1.setSpacing(50);
+        gridPane.getChildren().addAll(h1);
+        hBoxes = new HBox[StdNum];
+        Random random = new Random();
+        for (int i = 0; i < StdNum; i++) {
+            students.add(new studentTracker("Student" + i, random.nextInt(100)));
+            Label studentNameLabel = new Label(students.get(i).getName());
+            Label gradeLabelValue = new Label(Integer.toString(students.get(i).getGrade()));
+            HBox hBox = new HBox();
+            hBox.getChildren().addAll(studentNameLabel, gradeLabelValue);
+            hBox.setSpacing(85);
+            hBoxes[i] = hBox;
+            gridPane.add(hBox, 0, i + 1);
+            if (i % 2 == 0) {
+                hBox.setBackground(new Background(new BackgroundFill(Color.LIGHTGRAY, null, null)));
+            } else {
+                hBox.setBackground(new Background(new BackgroundFill(Color.WHITE, null, null)));
+            }
+        }
+return gridPane;
+    }
+    public void AnimationSelectionGrades(Integer minIndex,Integer swapIndex){
+        Timeline timeline=new Timeline(new KeyFrame(Duration.millis(1),actionEvent ->{
+            for (int i=0;i<students.size();i++) {
+                hBoxes[minIndex].setBackground(new Background(new BackgroundFill(Color.RED, CornerRadii.EMPTY, Insets.EMPTY)));
+
+                HBox temp = hBoxes[minIndex];
+                hBoxes[minIndex] = hBoxes[swapIndex];
+                hBoxes[swapIndex] = temp;
+                hBoxes[minIndex].setBackground(new Background(new BackgroundFill(Color.RED, CornerRadii.EMPTY, Insets.EMPTY)));
+
+            }
+        } ));
 
 
-}
+    }
+}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"44467efd-aa85-4cd1-86d0-790f797d3aff\" name=\"Changes\" comment=\"first visualization\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_15_2024_7_56_PM_[Changes]1/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_15_2024_7_56_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_15_2024_7_56_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_15_2024_7_56_PM__Changes_1.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_21_2024_1_03_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_21_2024_1_03_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_21_2024_1_54_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_21_2024_1_54_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;maryam22001&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"db847dad-5a20-4338-9d14-a04d79841591\" />\r\n        <option name=\"url\" value=\"https://github.com/anton-onsy/Algorithm_Jfx.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2emlBL7pLMOVOPrGbRhxaHbpkeT\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/20109/IdeaProjects/Algorithm_Jfx&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settings.project.maven.repository.indices&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"44467efd-aa85-4cd1-86d0-790f797d3aff\" name=\"Changes\" comment=\"\" />\r\n      <created>1712517499532</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1712517499532</updated>\r\n      <workItem from=\"1713485617503\" duration=\"8423000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first visualization\">\r\n      <created>1713122013284</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713122013284</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first visualization\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713505137751</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713505137753</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first visualization\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"first visualization\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3d5f8f3333322d57d5f1f3f9d7ef3c63cadde826)
+++ b/.idea/workspace.xml	(date 1713883283871)
@@ -4,13 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="44467efd-aa85-4cd1-86d0-790f797d3aff" name="Changes" comment="first visualization">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_15_2024_7_56_PM_[Changes]1/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_15_2024_7_56_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_15_2024_7_56_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_15_2024_7_56_PM__Changes_1.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_21_2024_1_03_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_21_2024_1_03_PM__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_21_2024_1_54_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_21_2024_1_54_PM__Changes_.xml" afterDir="false" />
+    <list default="true" id="44467efd-aa85-4cd1-86d0-790f797d3aff" name="Changes" comment="there was an error in animation">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/algorithm_jfx/StudentGradeTrackerProject.java" afterDir="false" />
     </list>
@@ -99,7 +93,14 @@
       <option name="project" value="LOCAL" />
       <updated>1713505137753</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="there was an error in animation">
+      <created>1713882743292</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1713882743292</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -118,6 +119,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="first visualization" />
-    <option name="LAST_COMMIT_MESSAGE" value="first visualization" />
+    <MESSAGE value="there was an error in animation" />
+    <option name="LAST_COMMIT_MESSAGE" value="there was an error in animation" />
   </component>
 </project>
\ No newline at end of file
